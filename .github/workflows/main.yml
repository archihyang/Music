name: Main CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
      ai-service: ${{ steps.filter.outputs.ai-service }}
    
    steps:
    - uses: actions/checkout@v3
    
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          frontend:
            - 'frontend/**'
          backend:
            - 'backend/**'
          ai-service:
            - 'ai-models/**'
  
  frontend:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    uses: ./.github/workflows/frontend-ci.yml
  
  backend:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'
    uses: ./.github/workflows/backend-ci.yml
  
  ai-service:
    needs: detect-changes
    if: needs.detect-changes.outputs.ai-service == 'true'
    uses: ./.github/workflows/ai-service-ci.yml
  
  integration:
    runs-on: ubuntu-latest
    needs: [frontend, backend, ai-service]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Compose
      run: |
        docker-compose version
    
    - name: Build all services
      run: |
        docker-compose build
    
    - name: Run integration tests
      run: |
        docker-compose up -d
        sleep 30
        curl -f http://localhost:5173 || exit 1
        curl -f http://localhost:3001/health || exit 1
        curl -f http://localhost:8000/health || exit 1
        docker-compose down
    
    - name: Success notification
      if: success()
      run: echo "‚úÖ All services built and tested successfully!"
    
    - name: Failure notification
      if: failure()
      run: echo "‚ùå Build or tests failed. Please check the logs."

  deploy:
    runs-on: ubuntu-latest
    needs: integration
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy notification
      run: |
        echo "üöÄ Ready for deployment!"
        echo "Manual deployment steps:"
        echo "1. SSH to production server"
        echo "2. Pull latest changes"
        echo "3. Run docker-compose up -d"
        echo "4. Run database migrations"
        echo "5. Restart services"